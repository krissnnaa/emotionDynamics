Created Date			 Comments
2018-09-26T17:24:01Z			...even if you did not create it, use ... 
2018-09-26T17:29:01Z			responsibility. by using one of our bots, any contributor... 
2018-09-26T17:33:13Z			...start on its own line. 
2018-09-26T17:34:07Z			...issue, ask the... 
2018-09-26T17:40:25Z			limited 
2018-09-26T17:44:27Z			we'll be adding additional capabilities for the bot and will share them here when they are ready to be used. 
2018-09-26T17:24:01Z			...even if you did not create it, use ... 
2018-09-26T17:29:01Z			responsibility. by using one of our bots, any contributor... 
2018-09-26T17:33:13Z			...start on its own line. 
2018-09-26T17:34:07Z			...issue, ask the... 
2018-09-26T17:40:25Z			limited 
2018-09-26T17:44:27Z			we'll be adding additional capabilities for the bot and will share them here when they are ready to be used. 
2018-06-21T19:00:20Z			perhaps add to commentadded: ipython 7.0. replaces inputsplitter and inputtransformer which were deprecated in 7.0. 
2018-06-21T19:01:43Z			...line in the block. 
2018-06-21T19:03:03Z			``continuation `...```` 
2018-06-21T19:08:01Z			plain python prompts (typically >>>), where the 
2018-06-21T19:08:36Z			stray line? 
2018-06-21T19:09:07Z			perhaps change to docstring 
2018-06-21T19:09:41Z			note: we don't... 
2018-06-21T19:19:10Z			``"""assemble a single line from multiple continued line pieces (lines ending in `\` and the line following the last `\` in the block)for example, this code continues over multiple linesif (assign_ix is not none)                      and (len(line) >= assign_ix + 2)                      and (line[assign_ix+1].string == '%')                      and (line[assign_ix+2].type == tokenize.name)this statement contains four continued line pieces. assembling these pieces into a single line would beif (assign_ix is not none) and (len(line) >= assign_ix + 2) and (line[assign_ix+1].string == '%') and (line[assign_ix+2].type == tokenize.name)``` 
2018-06-21T19:19:56Z			docstring for when to use tokentransformbase 
2018-06-21T19:20:28Z			class docstring perhaps 
2018-06-21T19:26:56Z			transform a magic assignment which has been found by the class method `find()` in a cell block's linesnot sure that the above is technically correct but "found by find" is a bit ðŸ˜•  
2018-06-21T19:28:12Z			similar to comment above re: "found by find" 
2018-06-21T19:30:09Z			i would just add the comment into the docstring. 
2018-06-21T19:30:41Z			same comment as prior function. 
2018-06-21T19:31:20Z			with a semicolon: ; 
2018-06-21T19:32:22Z			with a forward slashsince the function names don't match the character it's better to be explicit imho. 
2018-06-21T19:33:26Z			add a brief docstring 
2018-06-21T19:34:35Z			let's make a class docstring hererelative priority of the different classes could be added to the module docstring or mentioned there. 
2018-06-21T19:35:02Z			docstring 
2018-06-21T19:35:12Z			docstring 
2018-06-21T19:36:20Z			for investigation and debugging 
2018-06-21T19:37:16Z			docstring """manages the different transforms applied to a cell or code block""" ? 
2018-06-21T19:40:21Z			make this available for backward compatibility (pre-7.0 release) with existing codefor example, ipykernel..new code should use input_transformer_manager. 
2018-06-21T19:40:48Z			:smile: good catch 
2018-06-21T19:41:48Z			add docstring explaining static input transformation vs dynamic transformations 
2018-06-21T19:45:18Z			add a docstring similar to this``"""tests for the token-based transformers in ipython.core.inputtransformer2

line-based transformers are the simpler ones; token-based transformers are
more complex""``` 
2018-06-21T19:50:44Z			a comment on style here. perhaps going to a longer line length would improve readability and understanding. i.e. line 74 is more understandable than 71-72 and 66-70 
2018-06-21T21:41:43Z			yes, i had a backwards moment :wink: 
2018-01-26T16:11:40Z			just verifying my understanding of the test- set a custom exception handler for syntax errors
- grab cell execution count before running the cell with a syntax error
- run a cell with a syntax error
- restore default exception handler
- verify the hook to the handler was called only once
- verify the execution count was incremented by one  
2018-01-26T16:11:40Z			just verifying my understanding of the test- set a custom exception handler for syntax errors
- grab cell execution count before running the cell with a syntax error
- run a cell with a syntax error
- restore default exception handler
- verify the hook to the handler was called only once
- verify the execution count was incremented by one  
