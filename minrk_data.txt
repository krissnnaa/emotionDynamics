Created Date				Comments
2018-09-11T15:50:43Z			not milestone 70 
2018-05-25T11:26:02Z			if i understood correctly from the work carreau did with the loop_runners this should work with any runner as long as that runner can run async def coroutines which is a reasonable requirement rightnow what happens in a case like ipykernel where tornado and therefore also asyncio is already running im not sure how to deal with that right now httpsgithubcomipythonipykernelpull323 unconditionally uses run_cell_async and the existing asyncio runner we could try to handle the cases where the requested runner is not the alreadyrunning one and do a synchronous run with the chosen eventloopie  run_cell_async could do something likepythonif loop_running    return coro  will be awaited outsideelse    return loop_runnercorocarreau re nested ipythons im really not sure how to solve that one i made this a blocking wrapper around a fundamentally async core because it was the only way to get it to work without duplicating all of the methods as async and nonasync variants all the way down asyncio explicitly doesnt do nested eventloops so too allow nested ipythons with blocking calls we would have to make sure that we never instantiate an eventloop similarly to allow nested ipythons with async we would need to allow embedding ipython in a running eventloop which should be quite doable ipykernel is already doing this by simply calling run_cell_async instead of run_cellor we can try to violate the no nested eventloops assumption of asyncio by handling our own stack of clearingreplacing the current loop 
2018-08-16T13:50:34Z			neither of these are dependencies right we shouldnt require these packages 
2018-09-04T14:43:04Z			adding yield interactivity here makes this a notentirelyvalid coroutine doesnt it when i try to call await run_cell_async from ipykernel i get a bad yield last_expr how can we communicate this required info without faking that this isnt actually a coroutine does it need to be an actual async generator 
2018-10-11T12:03:32Z			thanks there is also some use in ipythoncoremagicsexecutionpy in the timeit magic i think the calls there to timetime should also be replaced with timeperf_counter 
2018-10-10T14:12:10Z			this empty args is never used 
2018-02-19T10:06:03Z			thanks can you make this a booltrue configtrue trait rather than an environment variable thats how we make things configurable in ipython see highlight_matching_brackets above on l194 for a similar example it has a default of false but this should default to true then here it can be enable_history_searchselfenable_history_search 
2018-09-04T13:22:39Z			deprecations 
2018-12-03T10:25:17Z			thanks 
2018-09-07T11:23:29Z			fair enough im just wondering if theres a better way to check if it should be async explicitly first rather than relying on the fact that coroutines are actually just a special kind of generators and having to call it in a special way that no other coro can be called 
2018-09-14T08:50:56Z			thanks carreau and ivanov 
2018-09-10T09:04:53Z			improvement 
2018-10-11T12:06:01Z			awesome do you think you could write a test for this issue in coreteststest_completion 
2018-11-21T14:42:29Z			thanks 
2018-11-21T14:41:19Z			obj is a signature not the object whose signature we are rendering maybe give it a name like obj_signature 
2018-09-10T09:04:21Z			development 
2018-10-19T07:49:12Z			looks like this pr was opened by mistake 
2018-09-07T11:45:09Z			11289 makes run_cell_async a regular coroutine by moving the should it be async check to a separate methodsince in general running it with a coroutine runner ought to work i know there are edge cases for now skipping this check should be safe 
2018-11-26T13:01:06Z			looks great thanks flyingsheep 
2018-10-15T11:59:51Z			thanks for the pr but i think this was already fixed by 11330 it hadnt been merged yet when this pr was opened 
2018-02-12T14:35:51Z			sorry about that updated 
2018-11-21T14:41:30Z			i assume self here should be the signature object 
2018-02-20T10:18:15Z			perfect thanks 
2018-09-14T08:46:58Z			not 70 
2018-10-10T14:06:01Z			thanks 
2018-08-16T13:47:34Z			asyncio support is pretty valuable and long overdue so if 34 makes it too hard i think the tradeoff is worth it 
2018-09-07T13:30:23Z			yeah we are running the transforms twice here in order to do the checki think the long term fix is to get to the point where its always async and we dont need to check so im happy with this as the current state 
2018-10-01T15:21:44Z			thanks 
2018-12-06T10:01:37Z			i think this is a great thing to add personally 
2018-10-10T14:09:26Z			this can be just super since ipython requires python 3 
2018-09-14T13:19:30Z			this one has no leading  but others do presumably only one of those is right so they should be made consistentotherwise   
2018-06-13T09:18:31Z			isnt the right fix to reorder the inheritance so the mixin comes first 
2018-09-26T13:09:13Z			agreed i dont think theres a reason to ever remove these the only reason to remove deprecated apis is if their presence is actively causing a problem 
2018-04-04T08:12:02Z			as with everything i think we shouldnt remove anything deprecated until its presence causes some kind of problem but deprecating these makes sense to me 
2018-10-31T13:32:11Z			updating homebrew and building python from source with pyenv both take a pretty long time i added a commit with a couple small changes only install python if not present install python binaries from pythonorg instead of from source avoid updating homebrewthe mac builds now complete in 3 minutes 
2018-12-03T10:34:17Z			 does it has any reason to break user code i dont think so but you never know the one valid use case for variable expansion that i can think of is shellstyle args leaving the code block unparsed eg this technically makes sensepythondest  myresulttimeit o dest some_python_codeprintmyresultbut with this patch and the magics implementation in general variable expansion is all or nothing we could try a deeper fix to try to only disable parsing of the code block but that would require pretty deep changes as the decision to implement var expansion would need to happen at a level where arguments are understood violating the magics are passed the line as a string conceptanother technically valid use could be building the code to time in a python variable and then runningpythoncode  npsinxtimeit codeive never seen it before but it might exist in the wild in both cases i think the tradeoff of never mangling the python code is worth it im going to leave that for 73  i had no intention of sneaking this under the wire i just hadnt noticed that 72 was ready for release 73 is perfect 
2018-02-26T09:01:08Z			thanks 
