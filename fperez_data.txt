Created Date				Comments
2018-05-01T03:17:20Z			to clarify for zichongkao its bc theres a finite  of these methods that are possible and an object can provide any subset of them  but an object cant declare an arbitrary _repr_foo_ method and expect it to work the list of which are acceptable is predefined by us 
2018-05-01T03:19:48Z			1 
2018-05-01T03:20:49Z			and as suggested visually by takluyver but to make sure its clear backticks so it renders as code 
2018-05-01T03:17:20Z			to clarify for zichongkao its bc theres a finite  of these methods that are possible and an object can provide any subset of them  but an object cant declare an arbitrary _repr_foo_ method and expect it to work the list of which are acceptable is predefined by us 
2018-05-01T03:19:48Z			1 
2018-05-01T03:20:49Z			and as suggested visually by takluyver but to make sure its clear backticks so it renders as code 
2019-01-23T02:52:50Z			i wanted to stop by and first thank you for this it sounds like getting to the bottom of it was quite the nightmarei unfortunately dont have time to look for a cleaner implementation but perhaps the following on the intent behind debug can help you originally ipython only had pdb which could be toggled if you knew that you needed it in advance but was useless if you had an expensive exception pop up and hadnt thought of activating it firstat some point we realized that if we saved enough tb state we could provide a better ux with a new magic that could be activated at _any_ time without any work in advance to dig back into a previous exception thus was debug bornthis explains why its so aggressive at storing exception state  now dont know for sure if the problem youve encountered can be mitigated in a way that saves less state and still allows debug to work but i suspect not  in that case i think the cleanest solution is to add new flags to debug on and off that toggle exception state storagethe question that remains is then what to do by default we have two optionsa preserve current default behavior so debug works out of the box but users on gpu workflows would need to toggle it off on startup or in their config filesb toggle it off by default basically consider the current behavior a bad enough bug worth breaking backward expectations of behavior users could still configure it to force on if desired and a naked debug call with no exception storage active could print an informative error toggling it on and explaining the situationim slightly inclined towards a as this while problematic still seems to be a slightly specialized bug and changing the behavior may confuse many existing users  but i could see a good argument going the other way too happy to hear others thoughtsmany thanks again for the hard work youve put into it probably one of the craziest bug fixes in terms of time invested vs final lines of code  
2019-01-23T02:52:50Z			i wanted to stop by and first thank you for this it sounds like getting to the bottom of it was quite the nightmarei unfortunately dont have time to look for a cleaner implementation but perhaps the following on the intent behind debug can help you originally ipython only had pdb which could be toggled if you knew that you needed it in advance but was useless if you had an expensive exception pop up and hadnt thought of activating it firstat some point we realized that if we saved enough tb state we could provide a better ux with a new magic that could be activated at _any_ time without any work in advance to dig back into a previous exception thus was debug bornthis explains why its so aggressive at storing exception state  now dont know for sure if the problem youve encountered can be mitigated in a way that saves less state and still allows debug to work but i suspect not  in that case i think the cleanest solution is to add new flags to debug on and off that toggle exception state storagethe question that remains is then what to do by default we have two optionsa preserve current default behavior so debug works out of the box but users on gpu workflows would need to toggle it off on startup or in their config filesb toggle it off by default basically consider the current behavior a bad enough bug worth breaking backward expectations of behavior users could still configure it to force on if desired and a naked debug call with no exception storage active could print an informative error toggling it on and explaining the situationim slightly inclined towards a as this while problematic still seems to be a slightly specialized bug and changing the behavior may confuse many existing users  but i could see a good argument going the other way too happy to hear others thoughtsmany thanks again for the hard work youve put into it probably one of the craziest bug fixes in terms of time invested vs final lines of code  
2019-01-23T02:52:50Z			i wanted to stop by and first thank you for this it sounds like getting to the bottom of it was quite the nightmarei unfortunately dont have time to look for a cleaner implementation but perhaps the following on the intent behind debug can help you originally ipython only had pdb which could be toggled if you knew that you needed it in advance but was useless if you had an expensive exception pop up and hadnt thought of activating it firstat some point we realized that if we saved enough tb state we could provide a better ux with a new magic that could be activated at _any_ time without any work in advance to dig back into a previous exception thus was debug bornthis explains why its so aggressive at storing exception state  now dont know for sure if the problem youve encountered can be mitigated in a way that saves less state and still allows debug to work but i suspect not  in that case i think the cleanest solution is to add new flags to debug on and off that toggle exception state storagethe question that remains is then what to do by default we have two optionsa preserve current default behavior so debug works out of the box but users on gpu workflows would need to toggle it off on startup or in their config filesb toggle it off by default basically consider the current behavior a bad enough bug worth breaking backward expectations of behavior users could still configure it to force on if desired and a naked debug call with no exception storage active could print an informative error toggling it on and explaining the situationim slightly inclined towards a as this while problematic still seems to be a slightly specialized bug and changing the behavior may confuse many existing users  but i could see a good argument going the other way too happy to hear others thoughtsmany thanks again for the hard work youve put into it probably one of the craziest bug fixes in terms of time invested vs final lines of code  
2019-01-23T02:52:50Z			i wanted to stop by and first thank you for this it sounds like getting to the bottom of it was quite the nightmarei unfortunately dont have time to look for a cleaner implementation but perhaps the following on the intent behind debug can help you originally ipython only had pdb which could be toggled if you knew that you needed it in advance but was useless if you had an expensive exception pop up and hadnt thought of activating it firstat some point we realized that if we saved enough tb state we could provide a better ux with a new magic that could be activated at _any_ time without any work in advance to dig back into a previous exception thus was debug bornthis explains why its so aggressive at storing exception state  now dont know for sure if the problem youve encountered can be mitigated in a way that saves less state and still allows debug to work but i suspect not  in that case i think the cleanest solution is to add new flags to debug on and off that toggle exception state storagethe question that remains is then what to do by default we have two optionsa preserve current default behavior so debug works out of the box but users on gpu workflows would need to toggle it off on startup or in their config filesb toggle it off by default basically consider the current behavior a bad enough bug worth breaking backward expectations of behavior users could still configure it to force on if desired and a naked debug call with no exception storage active could print an informative error toggling it on and explaining the situationim slightly inclined towards a as this while problematic still seems to be a slightly specialized bug and changing the behavior may confuse many existing users  but i could see a good argument going the other way too happy to hear others thoughtsmany thanks again for the hard work youve put into it probably one of the craziest bug fixes in terms of time invested vs final lines of code  
2018-05-01T03:15:43Z			thanks for your contribution zichongkao takluyver i see the ci checks are failing but this is a doconly pr are they generically busted sorry that i havent been keeping an eye on this for so long so feel free to tell me if its documented elsewhere or youre working on it  
2018-05-01T21:55:59Z			merged thanks zichongkao for your first contribution to ipython looking forward to more in the future  
2018-05-01T03:15:43Z			thanks for your contribution zichongkao takluyver i see the ci checks are failing but this is a doconly pr are they generically busted sorry that i havent been keeping an eye on this for so long so feel free to tell me if its documented elsewhere or youre working on it  
2018-05-01T21:55:59Z			merged thanks zichongkao for your first contribution to ipython looking forward to more in the future  
